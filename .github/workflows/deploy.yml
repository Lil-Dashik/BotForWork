name: Build and Push Docker Images

on:
  push:
    branches: [ master, main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    env:
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USERNAME: ${{ secrets.POSTGRES_USERNAME }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_URL: ${{ secrets.POSTGRES_URL }}

      DADATA_KEY: ${{ secrets.DADATA_KEY }}
      DADATA_SECRET: ${{ secrets.DADATA_SECRET }}
      TWOGIS_KEY: ${{ secrets.TWOGIS_KEY }}

      BOT_NAME: ${{ secrets.BOT_NAME }}
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}

      SERVICE_URL: ${{ secrets.SERVICE_URL }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      KAFKA_BROKER: ${{ secrets.KAFKA_BROKER }}

      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      REMOTE_SERVER: ${{ secrets.REMOTE_SERVER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin

      - name: Build bot-service project with Maven
        working-directory: ./backend
        run: mvn clean install

      - name: List files in bot-service target
        run: ls -la ./backend/target/

      - name: Build and Push bot-service Docker image
        run: |
          docker build -t $DOCKER_USER/service-forbot-kafka-deploy:latest ./backend
          docker push $DOCKER_USER/service-forbot-kafka-deploy:latest

      - name: Build telegram-bot project with Maven
        working-directory: ./bot
        run: mvn clean install

      - name: List files in telegram-bot target
        run: ls -la ./bot/target/

      - name: Build and Push telegram-bot Docker image
        run: |
          docker build -t $DOCKER_USER/telegrambot-kafka-deploy:latest ./bot
          docker push $DOCKER_USER/telegrambot-kafka-deploy:latest
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Remove old docker-compose.yaml and stop containers if running
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_SERVER "
            if [ -f /home/dasha/docker-compose.yaml ]; then
              echo 'Removing old docker-compose.yaml'
              sudo rm -f /home/dasha/docker-compose.yaml
            else
              echo 'docker-compose.yaml does not exist, skipping removal'
            fi

            if sudo docker-compose -f /home/dasha/docker-compose.yaml ps | grep -q 'Up'; then
              echo 'Stopping running containers'
              sudo docker-compose -f /home/dasha/docker-compose.yaml down
            else
              echo 'No running containers to stop'
            fi

            echo 'Removing Docker image lildashik/telegrambot-kafka-deploy:latest'
            sudo docker rmi -f lildashik/telegrambot-kafka-deploy:latest || echo 'Image removal failed or image not found'

            echo 'Removing Docker image lildashik/service-forbot-kafka-deploy:latest'
            sudo docker rmi -f lildashik/service-forbot-kafka-deploy:latest || echo 'Image removal failed or image not found'
          "
      - name: Copy new docker-compose.yaml to remote server
        run: |
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa docker-compose.yaml $REMOTE_SERVER:/home/dasha/

      - name: Create .env file
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_SERVER "
            echo POSTGRES_DB=$POSTGRES_DB > /home/dasha/.env
            echo POSTGRES_USERNAME=$POSTGRES_USERNAME >> /home/dasha/.env
            echo POSTGRES_PASSWORD=$POSTGRES_PASSWORD >> /home/dasha/.env
            echo POSTGRES_URL=$POSTGRES_URL >> /home/dasha/.env
            
            echo DADATA_KEY=$DADATA_KEY >> /home/dasha/.env
            echo DADATA_SECRET=$DADATA_SECRET >> /home/dasha/.env
            echo TWOGIS_KEY=$TWOGIS_KEY >> /home/dasha/.env
            
            echo BOT_NAME=$BOT_NAME >> /home/dasha/.env
            echo BOT_TOKEN=$BOT_TOKEN >> /home/dasha/.env
            
            echo SERVICE_URL=$SERVICE_URL >> /home/dasha/.env
            echo SERVER_PORT=$SERVER_PORT >> /home/dasha/.env
            echo KAFKA_BROKER=$KAFKA_BROKER >> /home/dasha/.env
          "

      - name: Deploy new container
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_SERVER "
            cd /home/dasha && \
            sudo docker-compose down && \
            sudo docker-compose up -d 
          "
        if: success()